> show dbs
admin             0.000GB
config            0.000GB
local             0.000GB
mongodb_practice  0.000GB
> use mongodb_practice
switched to db mongodb_practice
> show collections
movies
> db.movies.insertMany(
... [
... {
... title : "Fight Club",
... writer : "Chuck Palahniuko",
... year : "1999",
... actors: ["Brad Pitt", "Edward Norton"]
... },
... {
... title : "Pulp Fiction",
... writer : "Quentin Tarantino",
... year : "1994",
... actors: ["John Travolta" , "Uma Thurman"]
... },
... {
... title : "Inglorious Basterds",
... writer : "Quentin Tarantino",
... year : "2009",
... actors: ["Brad Pitt", "Diane Kruger", "Eli Roth"]
... },
... {
... title : "The Hobbit: An Unexpected Journey",
... writer : "J.R.R. Tolkein",
... year : "2012",
... franchies : "The Hobbit"
... },
... {
... title : "The Hobbit: The Desolation of Smaug",
... writer : "J.R.R. Tolkein",
... year : "2013",
... franchies : "The Hobbit"
... },
... {
... title : "The Hobbit: The Battle of the Five Armies",
... writer : "J.R.R. Tolkein",
... year : "2012",
... franchies : "The Hobbit",
... synopsis : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain From Falling into the hands of a rising darkness."
... },
... {
... title : "Pee Wee Herman's Big Adventure"
... },
... {
... title: "Avatar"
... }
... ]
... )
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("60766443407e08bb2e6b6b7b"),
                ObjectId("60766443407e08bb2e6b6b7c"),
                ObjectId("60766443407e08bb2e6b6b7d"),
                ObjectId("60766443407e08bb2e6b6b7e"),
                ObjectId("60766443407e08bb2e6b6b7f"),
                ObjectId("60766443407e08bb2e6b6b80"),
                ObjectId("60766443407e08bb2e6b6b81"),
                ObjectId("60766443407e08bb2e6b6b82")
        ]
}
Q 1) get all documents
a) > db.movies.find()
{ "_id" : ObjectId("60766443407e08bb2e6b6b7b"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : "1999", "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7c"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : "1994", "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7d"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : "2009", "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7e"), "title" : "The Hobbit: An Unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchies" : "The Hobbit" }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7f"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : "2013", "franchies" : "The Hobbit" }
{ "_id" : ObjectId("60766443407e08bb2e6b6b80"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchies" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain From Falling into the hands of a rising darkness." }
{ "_id" : ObjectId("60766443407e08bb2e6b6b81"), "title" : "Pee Wee Herman's Big Adventure" }
{ "_id" : ObjectId("60766443407e08bb2e6b6b82"), "title" : "Avatar" }
b) > db.movies.find().pretty()
{
        "_id" : ObjectId("60766443407e08bb2e6b6b7b"),
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuko",
        "year" : "1999",
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : ObjectId("60766443407e08bb2e6b6b7c"),
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : "1994",
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : ObjectId("60766443407e08bb2e6b6b7d"),
        "title" : "Inglorious Basterds",
        "writer" : "Quentin Tarantino",
        "year" : "2009",
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
Q 2)get all documents with the writer set to "Quentin Tarantino"

> db.movies.find({writer:"Quentin Tarantino"})
{ "_id" : ObjectId("60766443407e08bb2e6b6b7c"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : "1994", "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7d"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : "2009", "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }

Q 3)get all documents where actors include "Brad Pitt"

> db.movies.find({actors:"Brad Pitt"})
{ "_id" : ObjectId("60766443407e08bb2e6b6b7b"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : "1999", "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7d"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : "2009", "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }

Q 4)get all documents with franchies set to "The Hobbit"

> db.movies.find({franchies:"The Hobbit"})
{ "_id" : ObjectId("60766443407e08bb2e6b6b7e"), "title" : "The Hobbit: An Unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchies" : "The Hobbit" }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7f"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : "2013", "franchies" : "The Hobbit" }
{ "_id" : ObjectId("60766443407e08bb2e6b6b80"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchies" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain From Falling into the hands of a rising darkness." }

Q 5)get all movies relesed in 90s

> db.movies.find({year:{$gt:"1990", $lt:"2000"}})
{ "_id" : ObjectId("60766443407e08bb2e6b6b7b"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : "1999", "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7c"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : "1994", "actors" : [ "John Travolta", "Uma Thurman" ] }
> db.movies.find({$or:[{year:{$gt:"2010"}},{year: {$lt:"2000"}}]})
{ "_id" : ObjectId("60766443407e08bb2e6b6b7b"), "title" : "Fight Club", "writer" : "Chuck Palahniuko", "year" : "1999", "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7c"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : "1994", "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7e"), "title" : "The Hobbit: An Unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchies" : "The Hobbit" }
{ "_id" : ObjectId("60766443407e08bb2e6b6b7f"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R. Tolkein", "year" : "2013", "franchies" : "The Hobbit" }
{ "_id" : ObjectId("60766443407e08bb2e6b6b80"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchies" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain From Falling into the hands of a rising darkness." }

Q 6)

U[PDATE DOCUMENTS:

Q 1) add a synopsis "The Hobbit: An Unexpected Journey":" A rulactant hobbit, Bilbo Baggins, Set out to the lonely Mountain with a spirited grouped od dwarves to reclaim their mountain home -and the gold within it -from the dragon Smaug."

>db.movies.update({_id:ObjectId("5c9f98e5e5c2dfe9b3729bfe")}, {$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })

Q 2) Add the synopsis:"The Hobbit:"The Desolation of Smaug":"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring"

> db.movies.update({_id:ObjectId("5c9fa42ae5c2dfe9b3729c03")}, {$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })

Q 3)add an actor name "Samuel L. Jackson" to the movie "Pulp Fiction"

> db.movies.update({_id:ObjectId("5c9f983ce5c2dfe9b3729bfc")}, {$push:{actors:"Samuel L. Jackson"}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })

TEXT SEARCH:

Q 1)find all movies that have a synopsis that contains the word "Bilbo"

> db.movies.find({synopsis:{$regex:"Bilbo"}})
{ "_id" : ObjectId("60766443407e08bb2e6b6b80"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchies" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain From Falling into the hands of a rising darkness." }

Q 2)find all movies that have a synopsis that contains the word "Gandalf"

db.movies.find({synopsis:{$regex:"Gandalf"}})

Q 3)find all movies that have a synopsis that contains the word bilbo and not the word gandalf

> db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]})
{ "_id" : ObjectId("60766443407e08bb2e6b6b80"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchies" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain From Falling into the hands of a rising darkness." }

Q 4)find all movies that have a synopsis that contains the word "dwarves" or "hobbit"

db.movies.find({$or:[{synopsis:{$regex:"dwarves"}}, {synopsis:{$regex:"hobbit"}}]})

Q 5)find all movies that have a synopsis that contains the word "gold" and "dragon"

db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"dragon"}}]})

DELETE DOCUMENTS:

Q 1)Delete the movie "Pee Wee Herman's Big Adventure"

> db.movies.remove({title:"Pee Wee Herman's Big Adventure"})
WriteResult({ "nRemoved" : 1 })

Q 2)Delete the movie "Avatar"

> db.movies.remove({title:"Avatar"})
WriteResult({ "nRemoved" : 1 })

RELATIONSHIP:

USERS:
> db.createCollection("users")
{ "ok" : 1 }
> db.users.insert({_id:1,username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})
WriteResult({ "nInserted" : 1 })
> db.users.insert({_id:2, username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})
WriteResult({ "nInserted" : 1 })

POSTS:
> db.createCollection("posts")
{ "ok" : 1 }
> db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})
WriteResult({ "nInserted" : 1 })
> db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})
WriteResult({ "nInserted" : 1 })

COMMENTS:
> db.createCollection("comments")
{ "ok" : 1 }
> db.comments.insert({ username:"GoodGuyGreg", comment:"Hope you got a good deal!", post:ObjectId("60766968407e08bb2e6b6b83")})
WriteResult({ "nInserted" : 1 })
> db.comments.insert({ username:"GoodGuyGreg", comment:"What's mine is yours!", post:ObjectId("60766968407e08bb2e6b6b83")})
WriteResult({ "nInserted" : 1 })
> db.comments.insert({ username:"GoodGuyGreg", comment:"Don't violate the licensing agreement!", post:ObjectId("60766968407e08bb2e6b6b83")})
WriteResult({ "nInserted" : 1 })
> db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean", post:ObjectId("607669e4407e08bb2e6b6b88")})
WriteResult({ "nInserted" : 1 })
> db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack", post:ObjectId("607669e4407e08bb2e6b6b88")})
WriteResult({ "nInserted" : 1 })


Q 1)  find all users

> db.users.find()
{ "_id" : 1, "username" : "GoodGuyGreg", "first_name" : "Good Guy", "last_name" : "Greg" }
{ "_id" : 2, "username" : "ScumbagSteve", "fullname" : { "first" : "Scumbag", "last" : "Steve" } }
> db.users.find().pretty()
{
        "_id" : 1,
        "username" : "GoodGuyGreg",
        "first_name" : "Good Guy",
        "last_name" : "Greg"
}
{
        "_id" : 2,
        "username" : "ScumbagSteve",
        "fullname" : {
                "first" : "Scumbag",
                "last" : "Steve"
        }
}

Q 2) Find all posts

> db.posts.find()
{ "_id" : ObjectId("60766968407e08bb2e6b6b83"), "username" : "GoodGuyGreg", "title" : "Passes out at Party", "body" : "Raises your credit score" }
{ "_id" : ObjectId("607669a3407e08bb2e6b6b84"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("607669bc407e08bb2e6b6b85"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends you a pull request" }
{ "_id" : ObjectId("607669c8407e08bb2e6b6b86"), "username" : "ScumbagSteve", "title" : "Borrows something", "body" : "Sells it" }
{ "_id" : ObjectId("607669d8407e08bb2e6b6b87"), "username" : "ScumbagSteve", "title" : "Borrows everything", "body" : "The end" }
{ "_id" : ObjectId("607669e4407e08bb2e6b6b88"), "username" : "ScumbagSteve", "title" : "Forks your repo on github", "body" : "Sets to private" }
> db.posts.find().pretty()
{
        "_id" : ObjectId("60766968407e08bb2e6b6b83"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at Party",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("607669a3407e08bb2e6b6b84"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
Q 3) find all  post that was authored "GoodGuyGreg"

> db.posts.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("60766968407e08bb2e6b6b83"), "username" : "GoodGuyGreg", "title" : "Passes out at Party", "body" : "Raises your credit score" }
{ "_id" : ObjectId("607669a3407e08bb2e6b6b84"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("607669bc407e08bb2e6b6b85"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends you a pull request" }

Q 4)find all  post that was authored "ScumbagSteve"

> db.posts.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("607669c8407e08bb2e6b6b86"), "username" : "ScumbagSteve", "title" : "Borrows something", "body" : "Sells it" }
{ "_id" : ObjectId("607669d8407e08bb2e6b6b87"), "username" : "ScumbagSteve", "title" : "Borrows everything", "body" : "The end" }
{ "_id" : ObjectId("607669e4407e08bb2e6b6b88"), "username" : "ScumbagSteve", "title" : "Forks your repo on github", "body" : "Sets to private" }

Q 5) Find all Comments

> db.comments.find()
{ "_id" : ObjectId("60766dbf407e08bb2e6b6b89"), "username" : "GoodGuyGreg", "comment" : "Hope you got a good deal!", "post" : ObjectId("60766968407e08bb2e6b6b83") }
{ "_id" : ObjectId("60766e0d407e08bb2e6b6b8a"), "username" : "GoodGuyGreg", "comment" : "What's mine is yours!", "post" : ObjectId("60766968407e08bb2e6b6b83") }
{ "_id" : ObjectId("60766e35407e08bb2e6b6b8b"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agreement!", "post" : ObjectId("60766968407e08bb2e6b6b83") }
{ "_id" : ObjectId("60766e6c407e08bb2e6b6b8c"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("607669e4407e08bb2e6b6b88") }
{ "_id" : ObjectId("60766e8d407e08bb2e6b6b8d"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("607669e4407e08bb2e6b6b88") }
> db.comments.find().pretty()
{
        "_id" : ObjectId("60766dbf407e08bb2e6b6b89"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : ObjectId("60766968407e08bb2e6b6b83")
}
{
        "_id" : ObjectId("60766e0d407e08bb2e6b6b8a"),
        "username" : "GoodGuyGreg",
        "comment" : "What's mine is yours!",
        "post" : ObjectId("60766968407e08bb2e6b6b83")
}

Q 6) Find all comments that was authored "GoodGuyGreg"

> db.comments.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("60766dbf407e08bb2e6b6b89"), "username" : "GoodGuyGreg", "comment" : "Hope you got a good deal!", "post" : ObjectId("60766968407e08bb2e6b6b83") }
{ "_id" : ObjectId("60766e0d407e08bb2e6b6b8a"), "username" : "GoodGuyGreg", "comment" : "What's mine is yours!", "post" : ObjectId("60766968407e08bb2e6b6b83") }
{ "_id" : ObjectId("60766e35407e08bb2e6b6b8b"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agreement!", "post" : ObjectId("60766968407e08bb2e6b6b83") }

Q 7) Find all  post that was authored "ScumbagSteve"

> db.comments.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("60766e6c407e08bb2e6b6b8c"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("607669e4407e08bb2e6b6b88") }
{ "_id" : ObjectId("60766e8d407e08bb2e6b6b8d"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("607669e4407e08bb2e6b6b88") }

Q 8)find all comments belonging to the post "Reports a bug in your code

>db.posts.aggregate([{$match:{title:"Reports a bug in your code"}},{$lookup:{from:"omments",localField:"_id',foreignField:"post",as:"comments"}}])
{ "_id" : ObjectId("607669bc407e08bb2e6b6b85"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends you a pull request", "comments" : [ ] }
